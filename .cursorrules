export const CursorProjectRules = {
  /**
   * Core Development Principles
   */
  corePrinciples: {
    preferFunctionalComponents: true,
    useTypeScript: true,
    useAtomicDesign: true,
    framework: 'React + Styled Components + Redux + TypeScript + Electron + Vite',
  },

  /**
   * Project Structure
   */
  structure: {
    description: 'Complete project structure including root configuration, build tools, and source code',
    layout: `
├── electron/                     # Electron-specific configuration
│   ├── services/                # Electron services
│   │   ├── hotkey/             # Hotkey management
│   │   ├── screenshot/         # Screenshot functionality
│   │   ├── shortcuts/          # Keyboard shortcuts
│   │   └── storage/           # Data persistence
│   ├── types/                  # Electron type definitions
│   ├── main.ts                 # Main process entry
│   ├── preload.ts             # Preload scripts
│   └── types.ts               # Shared types

├── src/                         # Application source code
│   ├── components/             # Shared components
│   │   ├── atoms/             # UI primitives
│   │   ├── molecules/         # Composite components
│   │   └── organisms/         # Complex components
│   ├── features/              # Feature modules
│   │   └── {FeatureName}/     # Feature-specific code
│   │       ├── components/    # Feature components
│   │       ├── hooks/         # Feature hooks
│   │       └── README.md      # Feature documentation
│   ├── context/               # React contexts
│   ├── templates/             # Template components
│   ├── pages/                  # Application pages
│   │   ├── MainApp/           # Main application page
│   │   └── {PageName}/        # Other pages
│   │       ├── components/    # Page-specific components
│   │       ├── hooks/         # Page-specific hooks
│   │       └── index.tsx      # Page entry point
│   ├── services/              # Application services
│   ├── store/                 # Redux store
│   ├── styles/                # Styling and theme
│   ├── test/                  # Test files
│   ├── types/                 # Type definitions
│   └── __fixtures__/         # Test fixtures

├── rules/                       # Project rules and guidelines
│   ├── general/               # General coding rules
│   ├── phases/                # Development phases
│   ├── component.rules.ts     # Component standards
│   ├── jest.rules.ts         # Testing standards
│   ├── tdd.rules.ts          # TDD guidelines
│   └── test-debug.rules.ts   # Debugging guidelines

├── scripts/                     # Build and maintenance scripts
├── dist-electron/               # Electron build output
├── public/                      # Static assets

# Configuration Files
├── .cursorrules                # Cursor IDE configuration
├── .eslintrc.cjs               # ESLint configuration
├── electron-builder.json5      # Electron builder config
├── jest.config.ts              # Jest configuration
├── tsconfig.json               # TypeScript configuration
├── vite.config.ts              # Vite configuration
└── package.json                # Project dependencies`,
  },

  /**
   * Component Development Process
   */
  componentDevelopment: {
    phases: [
      {
        name: 'PLANNING',
        description: 'Define component purpose and structure',
        rules: [
          'Define clear component purpose and boundaries',
          'Determine atomic level (atom/molecule/organism)',
          'Plan component hierarchy following atomic design',
          'Identify required props, state, and events',
          'Consider performance implications',
          'Plan error handling and loading states'
        ],
        atomicRules: {
          atoms: [
            'Must be UI primitives with no business logic',
            'Must be completely domain-agnostic',
            'Should wrap third-party components or HTML elements',
            'Must be highly reusable across any project'
          ],
          molecules: [
            'Must be compositions of atoms only',
            'Should remain relatively domain-agnostic',
            'Can have specific purposes while staying generic'
          ],
          organisms: [
            'Can compose atoms and molecules',
            'Can include minimal business logic if generic',
            'Must maintain reasonable reusability'
          ]
        }
      },
      {
        name: 'IMPLEMENTATION',
        structure: `
ComponentName/
  ├── ComponentName.tsx          # Main component
  ├── ComponentName.types.ts     # TypeScript types
  ├── ComponentName.styles.ts    # Styled components
  ├── ComponentName.hook.ts      # Custom hooks
  ├── index.ts                  # Exports
  ├── components/               # Subcomponents
  └── README.md                 # Documentation`,
        files: [
          {
            name: 'TYPES',
            rules: [
              'Define comprehensive interfaces',
              'Document with JSDoc',
              'Include all necessary type exports',
              'Define event handler types',
              'Include state types'
            ]
          },
          {
            name: 'STYLES',
            rules: [
              'Use theme tokens from src/styles/theme.ts',
              'Implement responsive design',
              'Support system color schemes',
              'Follow accessibility guidelines'
            ]
          },
          {
            name: 'HOOKS',
            rules: [
              'Extract complex logic to hooks',
              'Handle side effects properly',
              'Implement error handling',
              'Consider performance optimizations'
            ]
          },
          {
            name: 'COMPONENT',
            rules: [
              'Keep JSX clean and focused',
              'Implement error boundaries',
              'Add loading states',
              'Ensure accessibility'
            ]
          }
        ]
      },
      {
        name: 'TESTING',
        rules: [
          'Write comprehensive tests',
          'Test error states',
          'Test loading states',
          'Test user interactions',
          'Test accessibility'
          'See `rules/jest.rules.ts` for detailed test writing rules'
        ]
      }
    ]
  },

  /**
   * Electron Integration
   */
  electron: {
    mainProcess: [
      'Keep main process code focused on system interaction',
      'Implement proper error handling',
      'Use typed IPC communication',
      'Follow security best practices'
    ],
    services: [
      'Organize by feature/responsibility',
      'Implement proper error handling',
      'Use TypeScript for type safety',
      'Document public APIs'
    ],
    security: [
      'Use contextBridge for preload scripts',
      'Validate all IPC communication',
      'Follow least privilege principle',
      'Sanitize all user input'
    ]
  },

  /**
   * State Management
   */
  stateManagement: {
    redux: [
      'Use Redux Toolkit',
      'Organize by feature slices',
      'Implement proper error handling',
      'Use typed selectors'
    ],
    local: [
      'Use React hooks for local state',
      'Consider component hierarchy',
      'Avoid prop drilling',
      'Use context when appropriate'
    ]
  },

  /**
   * AI Integration
   */
  aiIntegration: {
    rules: [
      'Use OpenAI API',
      'Use ChatCompletion API',
      'use the gpt-4o-mini model'
    ]
  },

  /**
   * Design System Integration
   */
  designSystem: {
    theme: {
      location: 'src/styles/theme.ts',
      rules: [
        'Use theme tokens for all values',
        'Support system color schemes',
        'Follow spacing scale',
        'Use semantic color names'
      ]
    }
  },

  /**
   * Path Aliases
   */
  pathAliases: {
    baseAliases: {
      "@atoms/*": "src/components/atoms/*",
      "@molecules/*": "src/components/molecules/*",
      "@organisms/*": "src/components/organisms/*",
      "@templates/*": "src/templates/*",
      "@features/*": "src/features/*",
      "@services/*": "src/services/*",
      "@styles/*": "src/styles/*",
      "@context/*": "src/context/*",
      "@store/*": "src/store/*",
      "@test/*": "src/test/*",
      "@types/*": "src/types/*",
      "@electron/*": "electron/*",
      "@electron-services/*": "electron/services/*"
    }
  },

  /**
   * Performance Guidelines
   */
  performance: {
    rules: [
      'Use React.memo for pure components',
      'Optimize re-renders',
      'Implement code splitting',
      'Monitor bundle size',
      'Profile component performance'
    ]
  },

  /**
   * Testing Requirements
   */
  testing: {
    components: [
      'Unit tests for components',
      'Integration tests for features',
      'Accessibility tests',
      'Performance tests'
    ],
    electron: [
      'Test IPC communication',
      'Test service integration',
      'Test error handling',
      'Mock system APIs'
    ]
  },

  /**
   * Warning Signs
   */
  warnings: [
    'Component files over 300 lines',
    'Deep component hierarchies',
    'Mixed concerns in files',
    'Missing type definitions',
    'Inline styles',
    'Hard-coded values',
    'Direct Node.js API usage in renderer',
    'Untyped IPC channels',
    'Poor error handling',
    'Missing documentation'
  ]
};